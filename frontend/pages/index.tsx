import type { NextPage } from "next";
import Head from "next/head";
import React, { useEffect, useState } from "react";
import EditData from "../component/editData";
import { deleteStudent } from "../component/fetch/fetchData";
import SortData from "../component/sortData";
import TableValues from "../component/tableValues";
import styles from "../styles/Home.module.scss";
import { dataType } from "../types";
const { NEXT_PUBLIC_BACKEND_URL } = process.env;

const Home: NextPage = () => {
  const [studentData, setStudentData] = useState<dataType[]>([]);
  const [openEditBox, setOpenEditBox] = useState(false);
  const [content, setContent] = useState<dataType | null>();
  const [sortBy, setSortBy] = useState("");
  const [filterBy, setFilterBy] = useState("");

  useEffect(() => {
    const abortController = new AbortController();
    const fetchStudents = async () => {
      try {
        const res = await fetch(`${NEXT_PUBLIC_BACKEND_URL}/students`, {
          method: "GET",
          signal: abortController.signal,
        });
        const data = await res.json();
        setStudentData(data);
      } catch (err) {
        console.log(err);
      }
    };
    fetchStudents();
    return () => abortController.abort();
  }, []);

  
  /////////////////////////////////////////////////////////////////////////

  const onAddNew = () => {
    setOpenEditBox(true);
    setContent(null);
  };

  //////////////////////////////////////////////////////////////////////////

  const onEdit = (roll_no: number) => {
    setOpenEditBox(true);
    const data = studentData.filter((v) => v.roll_no === roll_no);
    setContent(data[0]);
  };


  //////////////////////////////////////////////////////////////////////////
  const onDelete = async (id: string) => {
    const del = confirm("This student data will be deleted");
    if (del) {
      const deleteStud = await deleteStudent(id);
      console.log(deleteStud);

      if (deleteStud) {
        setStudentData((prev) => prev.filter((v) => v._id !== id));
      }
    }
  };
  /////////////////////////////////////////////////////////////////////////

  return (
    <div className={styles.container}>
      <Head>
        <title>MERN CRUD operations</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.heading}>
          <div className={styles.title_sort}>
            <h1>Student Data</h1>
            <SortData setSortBy={setSortBy} setFilterBy={setFilterBy} />
          </div>

          <button onClick={onAddNew} className={styles.add_new}>
            Add New Student
          </button>
        </div>

        <div className={styles.student_data}>
          <table>
            <thead>
              <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Age</th>
                <th>Course</th>
                <th>Roll_no</th>
                <th>Birth_Date</th>
                <th>Address</th>
                <th>Action</th>
              </tr>
            </thead>
            <tbody>
              <>
                {studentData.length
                  ? studentData
                      .sort((a, b) =>
                        sortBy === "" || sortBy === "name"
                          ? a.name
                              .toLowerCase()
                              .localeCompare(b.name.toLowerCase())
                          : sortBy === "age"
                          ? a.age - b.age
                          : a.roll_no - b.roll_no
                      )
                      .map((v, i) =>
                        filterBy === "" || filterBy === "all" ? (
                          <TableValues
                            i={i}
                            v={v}
                            onEdit={onEdit}
                            onDelete={onDelete}
                          />
                        ) : v.course === filterBy ? (
                          <TableValues
                            i={i}
                            v={v}
                            onEdit={onEdit}
                            onDelete={onDelete}
                          />
                        ) : (
                          ""
                        )
                      )
                  : ""}
              </>
            </tbody>
          </table>
        </div>

        {openEditBox ? (
          <EditData
            content={content ? content : null}
            setStudentData={setStudentData}
            setOpenEditBox={setOpenEditBox}
          />
        ) : (
          ""
        )}
      </main>
    </div>
  );
};

export default Home;
